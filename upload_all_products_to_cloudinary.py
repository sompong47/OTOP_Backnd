"""
upload_products_railway.py
‡∏£‡∏±‡∏ô‡∏ö‡∏ô Railway ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Cloudinary ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï PostgreSQL
"""

import os
import django
import cloudinary
import cloudinary.uploader
from django.conf import settings

# ---------------------------
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Django
# ---------------------------
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "otop_project.settings")
django.setup()

from otop_app.models import Product

# ---------------------------
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ)
# ---------------------------
CLOUDINARY_CLOUD_NAME = os.environ.get('CLOUDINARY_CLOUD_NAME')
CLOUDINARY_API_KEY = os.environ.get('CLOUDINARY_API_KEY')
CLOUDINARY_API_SECRET = os.environ.get('CLOUDINARY_API_SECRET')

if not all([CLOUDINARY_CLOUD_NAME, CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET]):
    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloudinary")
    print("   - CLOUDINARY_CLOUD_NAME")
    print("   - CLOUDINARY_API_KEY")
    print("   - CLOUDINARY_API_SECRET")
    exit(1)

cloudinary.config(
    cloud_name=CLOUDINARY_CLOUD_NAME,
    api_key=CLOUDINARY_API_KEY,
    api_secret=CLOUDINARY_API_SECRET,
    secure=True
)

print("=" * 70)
print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ Cloudinary (Railway)")
print("=" * 70)
print(f"‚òÅÔ∏è  Cloudinary: {CLOUDINARY_CLOUD_NAME}")
print(f"üìä Database: PostgreSQL (Railway)")
print("=" * 70)

# ---------------------------
# ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
# ---------------------------
products = Product.objects.all()

if not products.exists():
    print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    exit(0)

success_count = 0
skip_count = 0
error_count = 0
no_image_count = 0

for product in products:
    print(f"\nüì¶ Product {product.id}: {product.name}")
    
    if not product.image:
        print(f"   ‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ - ‡∏Ç‡πâ‡∏≤‡∏°")
        no_image_count += 1
        continue

    image_str = str(product.image)
    print(f"   üì∑ Image ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {image_str}")

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Cloudinary URL ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if "cloudinary.com" in image_str or "res.cloudinary.com" in image_str:
        print(f"   ‚úÖ ‡∏°‡∏µ Cloudinary URL ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        skip_count += 1
        continue

    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô Local path ‡∏´‡∏£‡∏∑‡∏≠ Media URL
    # ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Railway ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    # ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ URL ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL
    
    if image_str.startswith('http://') or image_str.startswith('https://'):
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL
        try:
            print(f"   ‚¨ÜÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL...")
            result = cloudinary.uploader.upload(
                image_str,
                folder="otop_products",
                public_id=f"product_{product.id}",
                overwrite=True,
                resource_type="image"
            )
            
            secure_url = result['secure_url']
            product.image = secure_url
            product.save()
            
            print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            print(f"   üîó URL ‡πÉ‡∏´‡∏°‡πà: {secure_url}")
            success_count += 1
            
        except Exception as e:
            print(f"   ‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")
            error_count += 1
    else:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô path ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
        print(f"   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Local path ‡∏ö‡∏ô Railway ‡πÑ‡∏î‡πâ")
        print(f"   üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠ API")
        error_count += 1

# ---------------------------
# ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
# ---------------------------
print("\n" + "=" * 70)
print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
print("=" * 70)
print(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print(f"‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏° (‡∏°‡∏µ Cloudinary URL): {skip_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print(f"‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ: {no_image_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {error_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print(f"üì¶ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {products.count()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print("=" * 70)

# ‡πÅ‡∏™‡∏î‡∏á URL ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
print("\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á URL ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß:")
updated_products = Product.objects.exclude(image='')[:3]
for p in updated_products:
    print(f"   ‚Ä¢ Product {p.id}: {p.image}")
print("=" * 70)