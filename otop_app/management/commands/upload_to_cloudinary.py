"""
Django Management Command ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Cloudinary
‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà: otop_app/management/commands/upload_to_cloudinary.py

‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢: python manage.py upload_to_cloudinary
"""

from django.core.management.base import BaseCommand
from django.conf import settings
from otop_app.models import Product
import cloudinary
import cloudinary.uploader


class Command(BaseCommand):
    help = '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ Cloudinary'

    def handle(self, *args, **options):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cloudinary
        cloudinary.config(
            cloud_name=settings.CLOUDINARY_CLOUD_NAME,
            api_key=settings.CLOUDINARY_API_KEY,
            api_secret=settings.CLOUDINARY_API_SECRET,
            secure=True
        )

        self.stdout.write("=" * 70)
        self.stdout.write(self.style.SUCCESS("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ Cloudinary"))
        self.stdout.write("=" * 70)
        self.stdout.write(f"‚òÅÔ∏è  Cloudinary: {settings.CLOUDINARY_CLOUD_NAME}")
        self.stdout.write("=" * 70)

        products = Product.objects.all()
        
        if not products.exists():
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"))
            return

        success_count = 0
        skip_count = 0
        error_count = 0
        no_image_count = 0

        for product in products:
            self.stdout.write(f"\nüì¶ Product {product.id}: {product.name}")
            
            if not product.image:
                self.stdout.write("   ‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ - ‡∏Ç‡πâ‡∏≤‡∏°")
                no_image_count += 1
                continue

            image_str = str(product.image)
            self.stdout.write(f"   üì∑ Image: {image_str}")

            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Cloudinary URL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if "cloudinary.com" in image_str or "res.cloudinary.com" in image_str:
                self.stdout.write(self.style.SUCCESS("   ‚úÖ ‡∏°‡∏µ Cloudinary URL ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"))
                skip_count += 1
                continue

            # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Cloudinary
            try:
                self.stdout.write("   ‚¨ÜÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...")
                
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL
                if image_str.startswith(('http://', 'https://')):
                    result = cloudinary.uploader.upload(
                        image_str,
                        folder="otop_products",
                        public_id=f"product_{product.id}",
                        overwrite=True,
                        resource_type="image"
                    )
                else:
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô path local (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏ô server ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)
                    import os
                    clean_path = image_str.replace("/media/", "").replace("media/", "")
                    local_path = os.path.join(settings.MEDIA_ROOT, clean_path)
                    
                    if not os.path.exists(local_path):
                        self.stdout.write(self.style.ERROR(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {local_path}"))
                        error_count += 1
                        continue
                    
                    result = cloudinary.uploader.upload(
                        local_path,
                        folder="otop_products",
                        public_id=f"product_{product.id}",
                        overwrite=True,
                        resource_type="image"
                    )
                
                secure_url = result['secure_url']
                product.image = secure_url
                product.save()
                
                self.stdout.write(self.style.SUCCESS(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"))
                self.stdout.write(f"   üîó URL ‡πÉ‡∏´‡∏°‡πà: {secure_url}")
                success_count += 1
                
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"   ‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}"))
                error_count += 1

        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.stdout.write("\n" + "=" * 70)
        self.stdout.write(self.style.SUCCESS("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"))
        self.stdout.write("=" * 70)
        self.stdout.write(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        self.stdout.write(f"‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏° (‡∏°‡∏µ Cloudinary URL): {skip_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        self.stdout.write(f"‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ: {no_image_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        self.stdout.write(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {error_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        self.stdout.write(f"üì¶ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {products.count()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        self.stdout.write("=" * 70)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á URL
        self.stdout.write("\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á URL ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß:")
        updated_products = Product.objects.exclude(image='')[:3]
        for p in updated_products:
            self.stdout.write(f"   ‚Ä¢ Product {p.id}: {p.image}")
        self.stdout.write("=" * 70)